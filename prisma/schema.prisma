generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  username      String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  environments  Environment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Environment {
  id          String                     @id @default(cuid())
  title       String
  description String
  src         String
  author      User                       @relation(fields: [authorId], references: [id])
  authorId    String
  subcategories  SubcategoriesOnEnvironments[]
}

model Subcategory {
  id         String   @id @default(cuid())
  title      String
  category   Category @relation(fields: [categoryId], references: [id])
  environments  SubcategoriesOnEnvironments[]
  categoryId String
}

model Category {
  id            String                     @id @default(cuid())
  title         String
  subcategories Subcategory[]
}

model SubcategoriesOnEnvironments {
  environment   Environment @relation(fields: [environmentId], references: [id])
  environmentId String
  subcategory      Subcategory    @relation(fields: [subcategoryId], references: [id])
  subcategoryId    String

  @@id([environmentId, subcategoryId])
}
